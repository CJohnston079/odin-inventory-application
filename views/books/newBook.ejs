<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Inventory | <%= title %></title>
		<link rel="stylesheet" href="../styles/index.css" />
	</head>
	<body>
		<%- include("../partials/header", { backAnchor: true }) %>
		<h2><%= title %></h2>
		<form action="/books" method="post" id="new-book">
			<ul>
				<li>
					<label for="title">Book title:</label>
					<input type="text" name="title" id="title" required />
					<span class="field-message"></span>
				</li>
				<li>
					<label for="author">Author:</label>
					<input
						type="text"
						name="author"
						id="author"
						placeholder="Start typing to show suggestions"
						required
					/>
					<span class="field-message"></span>
					<ul id="author-suggestions"></ul>
				</li>
				<li>
					<label for="genres">Genre(s):</label>
					<input
						type="text"
						name="genres"
						id="genres"
						placeholder="Start typing to show suggestions"
						required
					/>
					<span class="field-message"></span>
					<ul id="genre-suggestions"></ul>
				</li>
				<li>
					<label for="publication-year">Publication year:</label>
					<input
						type="number"
						name="publicationYear"
						id="publication-year"
						max="<%= new Date().getFullYear() %>"
					/>
					<span class="field-message"></span>
				</li>
				<li>
					<input type="radio" id="fiction" name="isFiction" value="true" checked />
					<label for="fiction">Fiction</label>
					<input type="radio" id="non-fiction" name="isFiction" value="false" />
					<label for="non-fiction">Non-fiction</label>
				</li>
			</ul>
			<button type="submit">Add book</button>
		</form>
	</body>
	<script type="application/json" id="authorsData">
		<%- JSON.stringify(authors) %>
	</script>
	<script type="application/json" id="genresData">
		<%- JSON.stringify(genres) %>
	</script>
	<script type="module">
		import enableAutoComplete from "../scripts/enableAutoComplete.js";
		import enableAutoCompleteMulti from "../scripts/enableAutoCompleteMulti.js";
		import { doesAuthorExist } from "../scripts/validateInputs.js";
		import { doesBookExistByAuthor } from "../scripts/validateInputs.js";
		import { validateAuthor } from "../scripts/validateInputs.js";
		import { validateGenres } from "../scripts/validateInputs.js";

		const authors = JSON.parse(document.getElementById("authorsData").textContent);
		const genres = JSON.parse(document.getElementById("genresData").textContent);

		enableAutoComplete({
			inputElementID: "author",
			suggestionListID: "author-suggestions",
			options: authors,
			fieldName: "name",
			addNewRoute: "authors",
		});
		enableAutoCompleteMulti({
			inputElementID: "genres",
			suggestionListID: "genre-suggestions",
			options: genres,
			fieldName: "genre_name",
			addNewRoute: "genres",
		});

		const titleInput = document.querySelector("#title");
		const authorInput = document.querySelector("#author");
		const genresInput = document.querySelector("#genres");
		const yearInput = document.querySelector("#publication-year");

		const handleTitleInput = async function () {
			const titleMessage = document.querySelector("#title + .field-message");
			const book = titleInput.value;
			const author = authorInput.value;

			if (!author) {
				titleMessage.textContent = "";
				return;
			}

			const bookExists = await doesBookExistByAuthor(titleInput.value, author);

			if (bookExists) {
				titleMessage.textContent = `${book} by ${author} is already added.`;
			} else {
				titleMessage.textContent = "";
			}
		};

		const handleAuthorInput = async function () {
			const authorMessage = document.querySelector("#author + .field-message");
			const author = authorInput.value;

			if (!author) {
				authorMessage.textContent = "";
				return;
			}

			const authorExists = await doesAuthorExist(author);

			if (authorExists) {
				authorMessage.textContent = "";
			} else {
				authorMessage.textContent = `Author ${author} not found.`;

				const newAuthorAnchor = document.createElement("a");

				newAuthorAnchor.href = "../authors/new";
				newAuthorAnchor.textContent = `Add author +`;
				authorMessage.appendChild(newAuthorAnchor);
			}
		};

		const handleSubmit = async function (e) {
			e.preventDefault();

			const authorError = await validateAuthor(authorInput.value);

			const genresError = validateGenres(
				genresInput.value,
				genres.map(genre => genre.genre_name)
			);

			if (genresError) {
				e.preventDefault();
				const genresMessage = document.querySelector("#genres + .field-message");
				genresMessage.textContent = genresError;

				const newGenreAnchor = document.createElement("a");
				newGenreAnchor.href = "../genres/new";
				newGenreAnchor.textContent = `Add genre +`;
				genresMessage.appendChild(newGenreAnchor);
			}

			if (!authorError && !genresError) {
				e.target.submit();
			}
		};

		document.querySelector("#title").addEventListener("blur", handleTitleInput);
		document.querySelector("#author").addEventListener("blur", handleTitleInput);
		document.querySelector("#author").addEventListener("blur", handleAuthorInput);
		document.querySelector("#new-book").addEventListener("submit", async e => {
			handleSubmit(e);
		});
	</script>
</html>
